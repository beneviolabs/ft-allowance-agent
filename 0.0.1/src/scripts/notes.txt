#### Setup dependencies
1. Install near-cli-rs
2. Login with a near account and choose to save the private key into your mac's keychain

#### Setup your proxy contract
1. Use near-cli-rs to create a subaccount under your root account. e.g. the user root.near might create 0.root.near. Enter `near` and follow the prompts to `account - Manage Account`, `Create Account`, `sign` and `send` the transaction.
2. list the steps to clone the github repo and build the contract
3. list the steps to user near-cli-rs to deploy the wasm to the sub account created in step 1.
4. list steps to call add_authorized_user, {"account_id": "benevio-labs.testnet"}
5. list steps for callingh request_signature as the newly added authoried user, use an online base58 encoder https://www.browserling.com/tools/base58-encode
{"contract_id": "1.charleslavon.testnet","method_name": "send", "args":[],"gas": "10000000000000","deposit": "1000000000000000000000000","nonce": 290162784921,"block_hash":J1uqM1KkYTCHS15hJpaXHSZ1rdDvejecUqBLzopA1JQ1qPW5b92WQD3XWPAE}

to get Vec<u8>, create a dictionary, hash it, then take the hashed_payload.to_vec()

{"contract_id": "wrap.testnet","method_name": "near_deposit", "args":[],"gas": "10000000000000","deposit": "1000000000000000000000000","nonce": "234251","block_hash":"J1uqM1KkYTCHS15hJpaXHSZ1rdDvejecUqBLzopA1JQ1qPW5b92WQD3XWPAE"}

near contract call-function as-transaction agent.charleslavon.testnet add_authorized_user json-args '{"account_id": "benevio-labs.testnet"}' prepaid-gas '100.0 Tgas' attached-deposit '0 NEAR' sign-as charleslavon.testnet network-config testnet sign-with-keychain send


/Users/charles/.nearai/registry/charleslavon.near/ft-allowance/0.0.1/src/target/wasm32-unknown-unknown/release/proxy_contract.wasm


 near contract deploy agent.charleslavon.testnet use-file target/wasm32-unknown-unknown/release/proxy_contract.wasm with-init-call new json-args '{"owner_id":"charleslavon.testnet"}' prepaid-gas '100.0 Tgas' attached-deposit '5 NEAR' network-config testnet sign-with-keychain send

near call 1.charleslavon.testnet request_signature '{
  "contract_id": "wrap.testnet",
  "method_name": "near_deposit",
  "args": [],
  "gas": "10000000000000",
  "deposit": "1000000000000000000000000",
  "nonce": "1",
  "block_hash": "11111111111111111111111111111111"
}' --accountId 00700.testnet --deposit 1


near call 1.charleslavon.testnet request_signature '{
    "contract_id": "wrap.testnet",
    "method_name": "near_deposit",
    "args": [],
    "gas": "0",
    "deposit": "1000000000000000000000000",
    "nonce": "1741872885223442",
    "block_hash": "3FdWRQpaQq7uuvcah3KM8os7WsBmS7aHqVCerNnw4bSd"
  }' --accountId 00700.testnet --deposit 1


- Derive a MPC public key for your sub account
near view v1.signer-prod.testnet derived_public_key '{"path":"ed25519:4uXRXyWhbspLcKmc7YWH8F2QdL9ByizHxP8AQQgUNRnL", "predecessor": "1.charleslavon.testnet"}'

- Add this public key as a full access key onto your sub account

near account add-key 1.charleslavon.testnet grant-full-access use-manually-provided-public-key secp256k1:4VpBxc5ykqNNZ92zFeFp2NL18TUG9miZXZuC3JC8tzo9i2kxPPPkR3gCWCE5Q5pxH2xMJXufpFZR2PHi7rZpvaFn network-config testnet sign-with-keychain send

https://testnet.nearblocks.io/txns/EH6CPikkkdEintJJN6wQC5kYpWbGAptCjmMfdKsfb9gB








curl -X POST 'https://rpc.testnet.fastnear.com', \
  -H 'Content-Type: application/json' \
  -d "{
    \"jsonrpc\": \"2.0\",
    \"id\": \"fastnear\",
    \"method\": \"send_tx\",
    \"params\": {
      \"signed_tx_base64\": \"+zBUM0DkVAXgV5mpl+z4anhtZ4Nk0RD20GBAr65sudYzxKuw9zQV/CAdzupmDWhut85jJB+qkZ0tSvdsbfjuVg==\",
      \"wait_until\": \"EXECUTED\"
    }\
  }"


found a sample mpc proxy that does something similar: https://github.com/nearuaguild/mpc-proxy-contract/blob/main/src/lib.rs

with the response from 'sign', I need to find how to connect that to a call to publish that transaction, perhaps by passing the results to an process which makes an http call to fastnear rpc with the signed request. parsing the resopnse into a signed request as https://github.com/near/mpc/blob/79ec50759146221e7ad8bb04520f13333b75ca07/chain-signatures/crypto-shared/src/kdf.rs#L56
